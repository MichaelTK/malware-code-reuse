import os
import git
import pickle
import sys
import requests
#import matplotlib.pyplot as plt

#REPOS_PATH = "/scratch/michal/sourcefinder_repositories2/"
REPOS_PATH = "/ufsf_combined_repos/repositories/"
repos_path_nas = "/csg_nas/michal_research_docker_shared_folder/"
username = "wummakez"
token = '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'
headers = {'Authorization': 'token ' + token}
count_nulls = 0

def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]

def get_num_forks_stars(repository):
    # suffix = repository.split("/")[-1]
    # repo_path = repository+"/"+suffix
    error = False
    count = 0
    num_forks = -1
    num_stars = -1
    data = []
    try:
        remote = get_remote(repository)
        username = remote.split("/")[-2]
        reponame = remote.split("/")[-1]
        data = requests.get('https://api.github.com/repos/'+username+'/'+reponame, headers=headers).json()
        print(remote)
        print('https://api.github.com/repos/'+reponame+'/'+username)
        print(data)
        print("------------------------------")
        num_forks = data['forks_count']
        num_stars = data['stargazers_count']
    except Exception as e:
        print(e)
        error = True
    return num_forks, num_stars, error

def get_num_forks_stars_dicts(repositories,projectnames_in_subgraph):
    repo_and_num_forks = {}
    repo_and_num_stars = {}
    errors = 0
    x = 0
    for repo in repositories:
        if repo.split("/")[-1] in projectnames_in_subgraph:
            if os.path.isdir(repo):
                repolink = get_remote(repo)
                num_forks, num_stars, error = get_num_forks_stars(repo)
                if error == False:
                    repo_and_num_forks[repo] = num_forks
                    repo_and_num_stars[repo] = num_stars
                else:
                    errors = errors + 1
                x += 1
                if x % 100 == 0:
                    print("Done repos forks and stars: "+str(x))
                    print(repo_and_num_forks)
                    print("Errors: "+str(errors))
    print("Number of errors: "+str(errors))
    return repo_and_num_forks, repo_and_num_stars

def get_num_of_commits(repository):
    # suffix = repository.split("/")[-1]
    # repo_path = repository+"/"+suffix
    repo_path = repository
    if len(listdir_fullpath(repository)) > 0:
        repo_path  = listdir_fullpath(repository)[0]
    error = False
    count = 0
    try:
        repo = git.Repo(repo_path)
        count = repo.git.rev_list('--count', 'HEAD')
    except Exception as e:
        print(e)
        error = True
    return count, error

def get_authors(repository):
    # suffix = repository.split("/")[-1]
    # repo_path = repository+"/"+suffix
    # print(repository)
    repo_path = repository
    if len(listdir_fullpath(repository)) > 0:
        repo_path  = listdir_fullpath(repository)[0]
    error = False
    count = 0
    authors = set([])
    try:
        repo = git.Repo(repo_path)
        commits_list = list(repo.iter_commits())
        for commit in commits_list:
            authors.add(commit.author)
        count = len(authors)
    except Exception as e:
        print(e)
        error = True
    authors = list(authors)
    return authors, error

def get_authors_dict(repositories):
    repo_and_authors = {}
    errors = 0
    x = 0
    for repo in repositories:
        if os.path.isdir(repo):
            authors, error = get_authors(repo)
            if error == False:
                repo_and_authors[repo] = authors
            else:
                errors = errors + 1
            x += 1
            if x % 100 == 0:
                print("Done repos authors list: "+str(x))
                print("Number of errors: "+str(errors))
    return repo_and_authors

def get_num_authors(repository):
    # suffix = repository.split("/")[-1]
    # repo_path = repository+"/"+suffix
    repo_path = repository
    if len(listdir_fullpath(repository)) > 0:
        repo_path  = listdir_fullpath(repository)[0]
    error = False
    count = 0
    try:
        repo = git.Repo(repo_path)
        commits_list = list(repo.iter_commits())
        authors = set([])
        for commit in commits_list:
            authors.add(commit.author)
        count = len(authors)
    except Exception as e:
        print(e)
        error = True
    return count, error

def get_num_authors_dict(repositories):
    repo_and_num_authors = {}
    errors = 0
    x = 0
    for repo in repositories:
        if os.path.isdir(repo):
            count, error = get_num_authors(repo)
            if error == False:
                repo_and_num_authors[repo] = count
            else:
                errors = errors + 1
            x += 1
            if x % 100 == 0:
                print("Done repos num authors: "+str(x))
                print("Number of errors: "+str(errors))
    return repo_and_num_authors

def get_num_commits_dict(repositories):
    repo_and_num_commits = {}
    errors = 0
    count = 0
    x = 0
    for repo in repositories:
        if os.path.isdir(repo):
            count, error = get_num_of_commits(repo)
            if error == False:
                repo_and_num_commits[repo] = count
            else:
                errors = errors + 1
            x += 1
            if x % 100 == 0:
                print("Done repos get num commits: "+str(x))
                print("Number of errors: "+str(errors))
    return repo_and_num_commits

def get_repo_timespan_dict(repositories):
    errors = 0
    repos_and_commits = {}
    count = 0
    for repository in repositories:
        if os.path.isdir(repository):
            try:
                #print("----------------------------------------------------------")
                # suffix = repository.split("/")[-1]
                # repo_path = repository+"/"+suffix
                repo_path = repository
                if len(listdir_fullpath(repository)) > 0:
                    repo_path  = listdir_fullpath(repository)[0]
                repo = git.Repo(repo_path)
                tree = repo.tree()
                commits = []
                for blob in tree:
                    commit = next(repo.iter_commits(paths=blob.path))
                    #print(blob.path, commit.committed_date)
                    commits.append(commit.committed_date)
                repos_and_commits[repository] = commits
            except Exception as e:
                print(e)
                errors = errors + 1
            count = count + 1
            if(count % 100 == 0):
                print("Done repos timespan dict: "+str(count))
        #commits_and_times[blob.path] = commit.committed_date
        #print(blob.path, commit.committed_date)
                print("Number of errors: "+str(errors))
    return repos_and_commits

def get_timespan(commits_and_times):
    times = []
    global count_nulls
    for commit in commits_and_times:
        times.append(commits_and_times[commit])
    max_num = 0
    min_num = 0
    if len(times) < 1:
        max_num = -1
        min_num = -1
        count_nulls = count_nulls + 1
    else:
        max_num = max(times)
        min_num = min(times)
    # timespan = max_num-min_num
    timespan = min_num
    return timespan

def get_repo_timespans(repos_and_commits):
    global count_nulls
    repo_and_timespans = {}
    for repo in repos_and_commits:
        commits_and_times = {}
        timespan = 0
        commits = repos_and_commits[repo]
        for commit in commits:
            commits_and_times[commit] = commit
        timespan = get_timespan(commits_and_times)
        repo_and_timespans[repo] = timespan
    print("Number of nulls: "+str(count_nulls))
    return repo_and_timespans

def get_remote(file):
    remote = None
    try:
        path = listdir_fullpath(file)[0]
        g = git.cmd.Git(path)
        remote = g.execute(["git", "remote", "get-url", "origin"])
    except Exception as e:
        print(e)
    return remote

def get_remotes(path):
    dirs = listdir_fullpath(path)
    dirs_and_remotes = {}
    remotes = []
    progress = 0
    for dir in dirs:
        if os.path.isdir(dir):
            actualdir = dir
            remote = get_remote(actualdir)
            if remote is not None:
                remotes.append(remote)
                dirs_and_remotes[remote] = dir
            progress = progress + 1
        if progress % 100 == 0:
            print("Got remotes for: "+str(progress))
    return remotes, dirs_and_remotes

def save_dictionary(path,dictionary):
    dictionary_path = path
    if os.path.exists(dictionary_path):
        os.remove(dictionary_path)

    with open(dictionary_path, 'wb') as handle:
        pickle.dump(dictionary, handle, protocol=pickle.HIGHEST_PROTOCOL)
    print("Dictionary saved at "+path)


def main():
    repositories = listdir_fullpath(REPOS_PATH)
    print("Grabbing repos and forks and stars...")
    repo_and_num_forks, repo_and_num_stars = get_num_forks_stars_dicts(repositories)
    save_dictionary(REPOS_PATH+"repo_and_num_forks.pkl",repo_and_num_forks)
    save_dictionary(REPOS_PATH+"repo_and_num_stars.pkl",repo_and_num_stars)
    print("Grabbing repos and authors...")
    repo_and_authors = get_authors_dict(repositories)
    save_dictionary(REPOS_PATH+"repo_and_authors.pkl",repo_and_authors)
    print("Grabbing repos and commits...")
    repos_and_commits = get_repo_timespan_dict(repositories)
    save_dictionary(REPOS_PATH+"repo_and_commits.pkl",repos_and_commits)

    with open(REPOS_PATH+"repo_and_commits.pkl", 'rb') as handle:
        repos_and_commits = pickle.load(handle)
    print("Calculating repos and timespans...")
    repo_and_timespans = get_repo_timespans(repos_and_commits)
    #print(repo_and_timespans)
    save_dictionary(REPOS_PATH+"repo_and_timemins.pkl",repo_and_timespans)
    # # sys.exit(0)
    print("Grabbing repos and num commits...")
    repo_and_num_commits = get_num_commits_dict(repositories)
    save_dictionary(REPOS_PATH+"repo_and_num_commits.pkl",repo_and_num_commits)
    print("Grabbing repos and num authors...")
    repo_and_num_authors = get_num_authors_dict(repositories)

    print("Successfully loaded "+str(len(repo_and_num_authors))+" repos.")
    save_dictionary(REPOS_PATH+"repo_and_num_authors.pkl",repo_and_num_authors)

    # projectnames_in_subgraph = []
    # with open(REPOS_PATH+'projectnames_in_wholegraph.pkl', 'rb') as handle:
    #     projectnames_in_subgraph = pickle.load(handle)
    # print("Grabbing repos and forks and stars...")
    # repo_and_num_forks, repo_and_num_stars = get_num_forks_stars_dicts(repositories,projectnames_in_subgraph)
    # save_dictionary(REPOS_PATH+"repo_and_num_forks_all.pkl",repo_and_num_forks)
    # save_dictionary(REPOS_PATH+"repo_and_num_stars_all.pkl",repo_and_num_stars)



main()
