import git
import os
import pickle
import urllib.request
from urllib.error import HTTPError, URLError
import sys

DATASET_PATH = "/media/k1462425/BackupsDrive/ufsf_all_repos_full/"
REPOS_DONE = "/home/k1462425/Documents/Research/already_done.txt"
repolist_path = "/ufsf_combined_repos/combined_repos_links.txt"

def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]

def main():
    repositories = []

    files = listdir_fullpath(DATASET_PATH)

    names_already_done = []
    if os.path.exists(REPOS_DONE):
        lines = []
        with open(REPOS_DONE,'r') as fp:
            line = fp.readline()
            line = line.rstrip()
            if line.endswith("/"):
                names_already_done.append(line[:-1])
            else:
                names_already_done.append(line)
            while line:
                line = fp.readline()
                line = line.rstrip()
                if line.endswith("/"):
                    names_already_done.append(line[:-1])
                else:
                    names_already_done.append(line)

    print_to_stdout("Length of names already done: "+str(len(names_already_done)))
    print_to_stdout("Length of set of names: "+str(len(list(set(names_already_done)))))

    lines = []
    with open(repolist_path,'r') as fp:
        line = fp.readline()
        line = line.rstrip()
        repositories.append(line)
        while line:
            line = fp.readline()
            line = line.rstrip()
            repositories.append(line)

    repositories = list(set(repositories))

    count = 0
    for repo in repositories:
        if repo in names_already_done:
            count = count + 1
    print_to_stdout("Number of repositories in names already done: "+str(count))
    #sys.exit(0)

    failed_repos = []

    print_to_stdout("Number of repositories to pull: "+str(len(repositories)))
    repolinks_and_directories = {}
    count = 0
    modifier = 0
    fourohfours = 0
    codes = []
    for repo in repositories:
        if repo not in names_already_done and len(repo) > 5:
            print_to_stdout(repo)
            name = ""
            if name.endswith("/"):
                name = repo.split("/")[-2]
            else:
                name = repo.split("/")[-1]
            if name not in names_already_done and len(name) > 2:
                success = True
                usemodifier = False
                try:
                    if len(name) < 200:
                        os.mkdir(DATASET_PATH+name)
                        repolinks_and_directories[repo] = name
                except Exception as e1:
                    try:
                        os.mkdir(DATASET_PATH+name+str(modifier))
                        usemodifier = True
                        repolinks_and_directories[repo] = name+str(modifier)
                        modifier = modifier + 1
                    except Exception as e2:
                        try:
                            os.mkdir(DATASET_PATH+name+str(modifier+5))
                            repolinks_and_directories[repo] = name+str(modifier+5)
                            usemodifier = True
                            modifier = modifier + 1
                        except Exception as e3:
                            continue

                url = repo
                try:
                    status_code = urllib.request.urlopen(url).getcode()
                except Exception as ex:
                    failed_repos.append(repo)
                    success = False
                    fourohfours = fourohfours + 1
                    #codes.append(ex.code)

                if success:
                    try:
                        if usemodifier == True:
                            git.Git(DATASET_PATH+name+str(modifier-1)).clone(repo)
                        elif usemodifier == False:
                            git.Git(DATASET_PATH+name).clone(repo)
                        with open(REPOS_DONE,'a+') as fp:
                            fp.write(repo+"\n")
                        fp.close()
                    except Exception as e:
                        failed_repos.append(repo)

                count = count + 1
                if(count % 10 == 0):
                    print_to_stdout("Done: "+str(count)+"/"+str(len(repositories)))
                    print_to_stdout("404's: "+str(fourohfours))
                    print_to_stdout("Number of failed repos: "+str(len(failed_repos)))
            else:
                count = count + 1
        else:
            count = count + 1

    print_to_stdout("All repositories done.")

    print_to_stdout("Number of failed repositories: "+str(len(failed_repos)))
    print_to_stdout("Number of 404's: "+str(fourohfours))
    failed_repos = list(set(failed_repos))
    if os.path.exists(DATASET_PATH+'failed_repos.pkl'):
        os.remove(DATASET_PATH+'failed_repos.pkl')
    with open(DATASET_PATH+'failed_repos.pkl', 'wb') as f:
        pickle.dump(failed_repos, f)
    with open(DATASET_PATH+'repolinks_and_directories.pkl', 'wb') as f:
        pickle.dump(repolinks_and_directories, f)

    print_to_stdout("Failed repositories saved.")

    #with open(DATASET_PATH+'response_codes.pkl', 'wb') as f:
    #    pickle.dump(codes, f)
    #print("Response codes saved.")

def print_to_stdout(*a):

    # Here a is the array holding the objects
    # passed as the argument of the function
    print(*a, file = sys.stdout)

main()
